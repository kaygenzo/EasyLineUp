apply plugin: 'jacoco'
jacoco {
    toolVersion = "0.8.3"
}

project.afterEvaluate {
    def productFlavorName = "prod"
    def buildTypeName = "debug"
    def sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
    def sourcePath = "${productFlavorName}/${buildTypeName}"

    def testTaskName = "test${sourceName.capitalize()}UnitTest"

    task "${testTaskName}Coverage" (type:JacocoReport, dependsOn: "$testTaskName") {
        group = "Reporting"
        description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

        def excludes = [
                '**/R.class',
                '**/R$*.class',
                '**/BuildConfig.*',
                '**/Manifest*.*',
                '**/*Test*.*',
                '**/com/example/databinding/*',
                '**/com/example/generated/callback/*',
                '**/android/databinding/*',
                '**/androidx/databinding/*',
                '**/di/module/*',
                '**/*MapperImpl*.*',
                '**/*$ViewInjector*.*',
                '**/*$ViewBinder*.*',
                '**/BuildConfig.*',
                '**/*Component*.*',
                '**/*BR*.*',
                '**/Manifest*.*',
                '**/*$Lambda$*.*',
                '**/*Companion*.*',
                '**/*Module.*',
                '**/*Dagger*.*',
                '**/*MembersInjector*.*',
                '**/*_Factory*.*',
                '**/*_Provide*Factory*.*',
                '**/*Extensions*.*',
                '**/*$Result.*', /* filtering `sealed` and `data` classes */
                '**/*$Result$*.*'/* filtering `sealed` and `data` classes */
        ]

        def javaDebugTree = fileTree(
                // Java generated classes on Android project (debug build)
                dir: "${project.buildDir}/intermediates/javac/${sourceName}/classes",
                excludes: excludes
        )

        def kotlinDebugTree = fileTree(
                // Kotlin generated classes on Android project (debug build)
                dir: "${project.buildDir}/tmp/kotlin-classes/${sourceName}",
                excludes: excludes
        )

        classDirectories.setFrom(files([javaDebugTree], [kotlinDebugTree]))

        def coverageSourceDirs = [
                "${project.projectDir}/src/main/java",
                "${project.projectDir}/src/main/kotlin",
                "${project.projectDir}/src/$productFlavorName/java",
                "${project.projectDir}/src/$buildTypeName/java",
                "${project.projectDir}/src/$productFlavorName/kotlin",
                "${project.projectDir}/src/$buildTypeName/kotlin"
        ]

        additionalSourceDirs.setFrom(files(coverageSourceDirs))
        sourceDirectories.setFrom(files(coverageSourceDirs))
        executionData(files([
                "$project.buildDir/jacoco/${testTaskName}.exec"
        ]))

        reports {
            xml.enabled = true
            html.enabled = true
        }
    }
}