apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs.kotlin"
if (!project.hasProperty("disable-performance-plugin")) {
    apply plugin: 'com.google.firebase.firebase-perf'
}
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.appdistribution'
apply plugin: 'com.google.firebase.crashlytics'

def reportPropertiesFile = rootProject.file("bugbattle.properties")
def reportProperties = new Properties()
if (reportPropertiesFile.exists()) {
    reportProperties.load(new FileInputStream(reportPropertiesFile))
}
else {
    // Otherwise read from environment variables, this happens in CI
    reportProperties.setProperty("apiKey", "\"${System.getenv('REPORTING_TOOL_API_KEY')}\"")
}

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}
else {
    // Otherwise read from environment variables, this happens in CI
    keystoreProperties.setProperty("storeFile", "../telen.release.jks")
    keystoreProperties.setProperty("storePassword", "${System.getenv('KEYSTORE_PASSWORD')}")
    keystoreProperties.setProperty("keyAlias", "${System.getenv('KEY_ALIAS')}")
    keystoreProperties.setProperty("keyPassword", "${System.getenv('KEY_PASSWORD')}")
    keystoreProperties.setProperty("debug.storeFile", "../telen.debug.jks")
    keystoreProperties.setProperty("debug.storePassword", "${System.getenv('DEBUG_KEYSTORE_PASSWORD')}")
    keystoreProperties.setProperty("debug.keyAlias", "${System.getenv('DEBUG_KEY_ALIAS')}")
    keystoreProperties.setProperty("debug.keyPassword", "${System.getenv('DEBUG_KEY_PASSWORD')}")
}

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "com.telen.easylineup"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode appVersionCode
        versionName appVersionName
        testInstrumentationRunner "com.telen.easylineup.EasylineupAndroidTestRunner"
        multiDexEnabled true
        vectorDrawables.useSupportLibrary true
        buildConfigField "String", "ReportToolApiKey", reportProperties['apiKey']
        buildConfigField "Boolean", "UseBetaTool", "true"
        buildConfigField "String", "reportStorageRoot", "\"reports.dev\""
    }

    useLibrary 'android.test.runner'
    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'

    flavorDimensions 'version'

    signingConfigs {
        release {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }

        debug {
            storeFile file(keystoreProperties['debug.storeFile'])
            storePassword keystoreProperties['debug.storePassword']
            keyAlias keystoreProperties['debug.keyAlias']
            keyPassword keystoreProperties['debug.keyPassword']
        }
    }

    productFlavors {
        dev {
            dimension 'version'
            matchingFallbacks = ['prod']
        }
        prod {
            dimension 'version'
            firebaseAppDistribution {
                serviceCredentialsFile="easylineup-services.json"
                releaseNotesFile="releasenotes.txt"
                testersFile="testers.txt"
            }
            matchingFallbacks = ['prod']
            buildConfigField "String", "reportStorageRoot", "\"reports.prod\""
        }
        demo {
            dimension 'version'
            matchingFallbacks = ['demo']
            buildConfigField "Boolean", "UseBetaTool", "false"
            buildConfigField "String", "reportStorageRoot", "\"reports.demo\""
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            minifyEnabled false
            versionNameSuffix "-debug"
            testCoverageEnabled true
            firebaseCrashlytics {
                // If you don't need crash reporting for your debug build,
                // you can speed up your build by disabling mapping file uploading.
                mappingFileUploadEnabled false
            }
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }

    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    configurations.all {
        resolutionStrategy.force "com.google.android.material:material:1.2.1"
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.annotation:annotation:' + rootProject.androidxLibVersion

    // Testing-only dependencies
    androidTestImplementation 'androidx.test.espresso:espresso-core:' + rootProject.coreVersion
    androidTestImplementation 'androidx.test.espresso:espresso-core:' + rootProject.espressoCoreVersion
    androidTestImplementation 'androidx.test.espresso:espresso-idling-resource:' + rootProject.espressoCoreVersion
    androidTestImplementation (name:'cloudtestingscreenshotter_lib', ext:'aar')
    androidTestImplementation 'com.squareup.rx.idler:rx2-idler:0.10.0'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation 'tools.fastlane:screengrab:2.1.1'
    androidTestImplementation('com.adevinta.android:barista:4.2.0') {
        exclude group: 'org.jetbrains.kotlin' // Only if you already use Kotlin in your project
    }

    testImplementation 'androidx.test:core:' + rootProject.coreVersion
    testImplementation 'androidx.test.ext:junit:' + rootProject.extJUnitVersion
    testImplementation "junit:junit:$junitVersion"

    ////////// ANDROID X //////////

    implementation "androidx.recyclerview:recyclerview:$recyclerViewVersion"
    implementation "androidx.preference:preference:$preferenceVersion"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"
    implementation "androidx.appcompat:appcompat:$appCompatVersion"
    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version_ktx"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version_ktx"

    ////////// GOOGLE //////////

    implementation platform("com.google.firebase:firebase-bom:$firebaseBOMVersion")

    implementation "com.google.android.material:material:$googleMaterialVersion"
    implementation "com.google.code.gson:gson:$googleGsonVersion"
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-auth-ktx'
    implementation 'com.google.firebase:firebase-firestore-ktx'
    implementation 'com.google.firebase:firebase-storage-ktx'
    implementation 'com.google.firebase:firebase-config-ktx'
    if (!project.hasProperty("disable-performance-plugin")) {
        implementation "com.google.firebase:firebase-perf:$firebasePerfVersion"
    }

    ////////// PRIVATE //////////

    implementation project(path: ':repository')
    implementation project(path: ':domain')
    implementation "com.telen.library:tablemultiscroll:$tablemultiscrollVersion"

    ////////// OTHERS //////////

    implementation "com.jakewharton.timber:timber:$timberVersion"
    implementation "io.reactivex.rxjava2:rxandroid:$rxAndroidVersion"
    implementation "com.github.PhilJay:MPAndroidChart:$androidchartVersion"
    implementation "com.squareup.picasso:picasso:$picassoVersion"
    implementation "com.makeramen:roundedimageview:$roundedImageView"

    implementation "com.github.nguyenhoanglam:ImagePicker:$imagepickerVersion"

    implementation "io.insert-koin:koin-android:$koinVersion"
    implementation "com.getkeepsafe.taptargetview:taptargetview:$taptargetviewVersion"

    // only debug libraries

    debugImplementation "com.facebook.stetho:stetho:$stethoVersion"
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.3'

    implementation "com.github.kaygenzo:bugreporter:$bugreportingVersion"
    implementation "androidx.documentfile:documentfile:$documentFileVersion"
}

apply from: '../jacoco.gradle'
apply from: '../dependency-check.gradle'